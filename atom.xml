<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码农搬运工</title>
  
  <subtitle>I&#39;m a programmer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-05T04:50:09.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>码农搬运工</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="http://yoursite.com/2019/06/12/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_20190612/"/>
    <id>http://yoursite.com/2019/06/12/Redis学习笔记_20190612/</id>
    <published>2019-06-12T06:00:00.000Z</published>
    <updated>2019-08-05T04:50:09.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux环境下Redis的安装"><a href="#Linux环境下Redis的安装" class="headerlink" title="Linux环境下Redis的安装"></a>Linux环境下Redis的安装</h1><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><ol><li><p>一种类似一维数组的对象，由一组数据及相关的索引组成。</p><pre><code>tar -zxvf redis-3.2.8.tar.gzcd redis-3.2.8make &amp;&amp; make test </code></pre></li><li><p>安装到指定目录：</p><pre><code>make install PREFIX=/usr/local/bin</code></pre><ul><li>安装过程可能出现的错误一：<br><img src="https://ww2.yunjiexi.club/2019/06/12/Haxch.png" alt="Haxch.png"></li></ul></li></ol><ul><li><p>解决方案：</p><pre><code>yum install gcc</code></pre><p><img src="https://ww1.yunjiexi.club/2019/06/12/Haa0N.png" alt="Haa0N.png"></p></li><li><p>安装过程可能出现的错误二：<br><img src="https://ww2.yunjiexi.club/2019/06/12/HahYF.png" alt="HahYF.png"></p></li><li><p>解决方案：</p><pre><code>make MALLOC=libc</code></pre></li><li><p>安装过程可能出现的错误三：<br><a href="https://www.hualigs.cn/image/HaLoB" target="_blank" rel="noopener"><img src="https://ww1.yunjiexi.club/2019/06/12/HaLoB.png" alt="HaLoB.png"></a></p></li><li><p>解决方案：</p><pre><code>wget http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gztar -xzvf tcl8.6.1-src.tar.gzcd  /usr/local/tcl8.6.1/unix/./configure  make &amp;&amp; make install</code></pre></li></ul><ol start="3"><li><p>Redis生产环境启动方案：</p><ul><li><p>将redis_init_script脚本拷贝到linux的/etc/init.d目录中，并重命名为redis_6379</p><pre><code>cp /opt/redis-5.0.5/utils/redis_init_script /etc/init.d/redis_6379</code></pre></li><li><p>修改redis_6379脚本的第6行的REDISPORT，设置为相同的端口号（默认就是6379）</p></li><li><p>创建目录：</p><pre><code>mkdir /etc/redis（存放redis的配置文件）mkdir /var/redis/6379（存放redis的持久化文件）</code></pre></li><li><p>修改redis配置文件（默认在根目录下，redis.conf），拷贝到/etc/redis目录中，修改名称为6379.conf</p><pre><code>cp redis.conf /etc/redis/6379.conf</code></pre></li><li><p>修改redis.conf中的部分配置为生产环境</p><pre><code>--让redis以daemon（后台守护进程）进程运行daemonize  yes --设置redis的pid文件位置pidfile /var/run/redis_6379.pid--设置redis的监听端口号port 6379   --设置持久化文件的存储位置dir  /var/redis/6379     </code></pre></li><li><p>启动redis</p><pre><code>cd /etc/init.d           chmod 777 redis_6379 ./redis_6379 start</code></pre></li><li><p>确认redis进程是否启动</p><pre><code>ps -ef | grep redis</code></pre></li><li><p>让redis跟随系统启动自动启动</p><pre><code># chkconfig:   2345 90 10# description:  Redis is a persistent key-value databasechkconfig redis_6379 on</code></pre></li></ul></li><li><p>redis cli的使用</p><p> 编译后，进入cd /usr/loacl/bin下可看到redis-cli</p><ul><li>redis-cli SHUTDOWN，连接本机的6379端口停止redis进程</li><li>redis-cli -h 127.0.0.1 -p 6379 SHUTDOWN，制定要连接的ip和端口号</li><li>redis-cli PING，ping redis的端口，看是否正常</li><li>redis-cli，进入交互式命令行</li><li>SET k1 v1</li><li>GET k1</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux环境下Redis的安装&quot;&gt;&lt;a href=&quot;#Linux环境下Redis的安装&quot; class=&quot;headerlink&quot; title=&quot;Linux环境下Redis的安装&quot;&gt;&lt;/a&gt;Linux环境下Redis的安装&lt;/h1&gt;&lt;h2 id=&quot;编译安装&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter NoteBook使用介绍</title>
    <link href="http://yoursite.com/2019/05/08/jupyter-notebook%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D20190114/"/>
    <id>http://yoursite.com/2019/05/08/jupyter-notebook使用介绍20190114/</id>
    <published>2019-05-08T06:02:00.000Z</published>
    <updated>2019-08-05T04:50:09.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置工作目录"><a href="#设置工作目录" class="headerlink" title="设置工作目录"></a>设置工作目录</h3><ul><li><p>Anaconda安装完成后，自带了Jupyter NoteBook，初次启动可能会出现如下错误：<br><img src="https://ww2.yunjiexi.club/2019/05/08/H0ppL.png" alt="H0ppL.png"><br>出现原因是：未安装nodejs造成的，安装后。该错误解决。</p></li><li><p>安装成功后默认的Jupyter NoteBook设置查看如下，点击Jupyter NoteBook右键属性：</p><ul><li>【目标T】：<br>C:\Anaconda3\python.exe C:\Anaconda3\cwp.py C:\Anaconda3 C:\Anaconda3\python.exe C:\Anaconda3\Scripts\jupyter-notebook-script.py %USERPROFILE%    </li><li>【起始位置】：<br>C:\Users\Administrator</li></ul></li><li><p>默认设置的工作目录是C:\Users\Administrator下，参考了网上说的  修改默认工作目录的方法，最简单的是按以下实现：</p><ul><li>【目标T】：<br>C:\Anaconda3\Scripts\jupyter-notebook.exe</li><li>【起始位置】：<br>E:\Jupyter  （该目录需要提前创建）<br>按以上设置完后启动后，工作目录就设置为E盘下。</li></ul></li></ul><h3 id="主题的安装"><a href="#主题的安装" class="headerlink" title="主题的安装"></a>主题的安装</h3><ul><li><p><a href="https://pypi.org/project/   jupyterthemes/0.13.6/" target="_blank" rel="noopener">jupyterthemes</a>的官方下载地址可通过如下命令安装：<br><code>pip install jupyterthemes==0.13.6</code></p><p>我想安装的主题是monokai，通过执行以上命令后，发现没有monokai主题模板。通过查看网上其他安装方法，最终按以下方式执行成功：</p><pre><code>cd /d C:\Anaconda3\Scriptspip install jupyter-themer</code></pre><p>安装成功后，查看目前的主题模板，并执行monokai的设置：</p><pre><code>jt -l//可查看如下模板信息：chesterishgrade3gruvboxdgruvboxlmonokaioceans16onedorksolarizeddsolarizedl//设置monokai模板主题jt -t monokai -f dejavu -fs 12 -T</code></pre></li></ul><ul><li>参考链接：<a href="https://www.jianshu.com/p/91365f343585" target="_blank" rel="noopener">Jupyter Notebook介绍、安装及使用教程</a></li><li>在安装过程中会出现pip版本过低和jt -l命令无效。需要执行以下命令：</li></ul><pre><code>python -m pip install --upgrade pippip install --upgrade jupyterthemes</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设置工作目录&quot;&gt;&lt;a href=&quot;#设置工作目录&quot; class=&quot;headerlink&quot; title=&quot;设置工作目录&quot;&gt;&lt;/a&gt;设置工作目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Anaconda安装完成后，自带了Jupyter NoteBook，初次启动可能会出现如下
      
    
    </summary>
    
      <category term="工具介绍" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="日常笔记" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>webpack基础入门</title>
    <link href="http://yoursite.com/2019/02/27/webPack_20190227/"/>
    <id>http://yoursite.com/2019/02/27/webPack_20190227/</id>
    <published>2019-02-27T13:00:00.000Z</published>
    <updated>2019-08-06T09:01:09.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack介绍"><a href="#webpack介绍" class="headerlink" title="webpack介绍"></a>webpack介绍</h2><p>webpack：是一个前端资源的打包工具，它可以将js、image、css等资源当成一个模块进行打包。</p><p>###webpack的优点：</p><ul><li>模块化开发</li><li>编译typescript、ES6等高级语法</li><li>CSS预编译</li></ul><p>###webpack的缺点：</p><ul><li>配置繁琐，文档不丰富</li></ul><h2 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h2><ul><li><p>安装node.js</p><ul><li>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></li><li>安装成功后，在command下输入：node -v 确认是否安装成功</li></ul></li><li><p>安装npm<br>npm：Node Package Manage，node包管理和分发的工具，可以对应用的依赖进行管理，类似Maven工具。可以通过npm方便地下载js库，打包js文件。<br>node.js已集成了npm工具，可通过npm -v 查看当前版本。</p><ul><li><p>查看配置信息：</p><pre><code>npm config ls</code></pre><p>运行结果：</p><pre><code>metrics-registry = &quot;https://registry.npmjs.org/&quot;scope = &quot;&quot;user-agent = &quot;npm/6.4.1 node/v10.14.2 win32 x64&quot;; userconfig C:\Users\yang.zhongming\.npmrcprefix = &quot;C:\\Users\\Administrator\\AppData; node bin location = D:\Program Files\nodejs\node.execwd = C:\Users\AdministratorHOME = C:\Users\Administrator&quot;npm config ls -l&quot; to show all defaults.</code></pre></li><li><p>设置包路径：<br>默认的包管理路径：</p><pre><code>C:\Users\Administrator\AppData\Roaming\npm\node_modules</code></pre><p>修改包路径：<br>在node.js的安装目录下创建npm_modules和npm_cache</p><pre><code>-- 设置路径npm config set prefix &quot;D:\Program Files\nodejs\npm_modules&quot;npm config set cache &quot;D:\Program Files\nodejs\npm_cache&quot;-- 查看路径npm config ls; cli configsmetrics-registry = &quot;https://registry.npmjs.org/&quot;scope = &quot;&quot;user-agent = &quot;npm/6.4.1 node/v10.14.2 win32 x64&quot;; userconfig C:\Users\Administrator\.npmrccache = &quot;D:\\Program Files\\nodejs\\npm_cache&quot;prefix = &quot;D:\\Program Files\\nodejs\\npm_modules&quot;; builtin config undefined; node bin location = D:\Program Files\nodejs\node.exe; cwd = D:\Program Files\nodejs; HOME = C:\Users\Administrator; &quot;npm config ls -l&quot; to show all defaults.</code></pre></li></ul></li><li><p>安装cnpm<br>国内镜像，通常使用淘宝镜像来安装cnpm</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org-- 查看安装版本cnpm -v -- 版本信息cnpm@6.0.0 (D:\Program Files\nodejs\npm_modules\node_modules\cnpm\lib\parse_argv.js)npm@6.9.0 (D:\Program Files\nodejs\npm_modules\node_modules\cnpm\node_modules\npm\lib\npm.js)node@10.14.2 (D:\Program Files\nodejs\node.exe)npminstall@3.20.2 (D:\Program Files\nodejs\npm_modules\node_modules\cnpm\node_modules\npminstall\lib\index.js)prefix=D:\Program Files\nodejs\npm_moduleswin32 x64 6.1.7601registry=https://registry.npm.taobao.org</code></pre></li><li><p>安装nrm</p></li><li><p>安装webpack<br>webpack安装分为本地安装和全局安装，本地安装是将webpack安装在当前项目的node_modules目录中，仅对当前项目有效。全局安装类似系统安装，对所有项目有效。</p><ul><li><p>本地安装：</p><pre><code>cd 工程目录npm install --save webpacknpm install --save-dev webpack-cli（(4.0以后的版本需要安装webpack-cli）</code></pre></li><li><p>全局安装<br>webpack的js包下载到npm的包路径下</p><pre><code>npm install webpack -g</code></pre></li><li><p>指定版本安装</p><pre><code>cnpm install --save-dev webpack@3.6.0</code></pre></li><li><p>安装执行以下命令，确认是否安装成功</p><pre><code>webpack</code></pre><p>出现以下信息证明安装成功：</p><pre><code>No configuration file found and no output filename configured via CLI option.A configuration file could be named &apos;webpack.config.js&apos; in the current directory.Use --help to display the CLI options.</code></pre></li></ul></li></ul><h2 id="webpack的打包"><a href="#webpack的打包" class="headerlink" title="webpack的打包"></a>webpack的打包</h2><p>分模块开发：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:v-bind=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;vue.js 入门程序&lt;/title&gt;    &lt;script src=&quot;./js/vue.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;a v-bind:href=&quot;url&quot;&gt;&lt;span v-text=&quot;name&quot;&gt;&lt;/span&gt;&lt;/a&gt;        &lt;input type=&quot;text&quot; v-model=&quot;num1&quot;&gt; +        &lt;input type=&quot;text&quot; v-model=&quot;num2&quot;&gt; =        &lt;span v-text=&quot;result&quot;&gt;&lt;/span&gt;        &lt;button v-on:click=&quot;change&quot;&gt;计算&lt;/button&gt;    &lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot;&gt;    var vm = new Vue({        el:&quot;#app&quot;,        data:{name:&quot;计算器&quot;,              num1:0,              num2:0,              result:0,              url:&apos;http://www.baidu.com&apos;        },        methods:{            change:function () {                this.result = Number.parseInt(this.num1) + Number.parseInt(this.num2)                alert(this.result)            }        }    });&lt;/script&gt;&lt;/html&gt;</code></pre><p>对上述源代码进行分模块开发：</p><ul><li><p>模块model.js的创建：</p><pre><code>//子模块使用的方法var add = function (x,y){  return  x + y;}//导出方法,module固定关键字module.exports.add = add;//多个方法导出参考如下写法：module.exports  = {add1,add2};</code></pre></li><li><p>主程序main.js的创建：</p><pre><code>var {add} = require(&quot;./model01.js&quot;);var Vue = require(&quot;./vue.min.js&quot;);var VM = new Vue({    el:&apos;#app&apos;,    data:{    name:&apos;yzhm&apos;,    num1:0,    num2:1,    url:&apos;http://www.baidu.com&apos;,},methods:{    change:function() {    this.result = add(Number.parseInt(this.num1),Number.parseInt(this.num2))    }    }});</code></pre></li><li><p>webpack打包：</p><pre><code>cd js文件夹webpack main.js build.js</code></pre><p>执行后显示如下：<br><img src="https://ww1.yunjiexi.club/2019/03/18/D4r3M.png" alt="D4r3M.png"></p><p>原因是webpack版本过高，打包命令修改为：</p><pre><code>webpack main.js -o build.js</code></pre><p><img src="https://ww1.yunjiexi.club/2019/03/18/D43IU.png" alt="D43IU.png"></p></li><li><p>修改主画面：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:v-bind=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;   &lt;meta charset=&quot;UTF-8&quot;&gt;   &lt;title&gt;vue.js 入门程序&lt;/title&gt;   &lt;script src=&quot;./js/build.js&quot;&gt;   &lt;/script&gt;  &lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;&lt;a v-bind:href=&quot;url&quot;&gt;&lt;span v-text=&quot;name&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;input type=&quot;text&quot; v-model=&quot;num1&quot;&gt; +&lt;input type=&quot;text&quot; v-model=&quot;num2&quot;&gt; =&lt;span v-text=&quot;result&quot;&gt;&lt;/span&gt;&lt;button v-on:click=&quot;change&quot;&gt;计算&lt;/button&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;--注：主画面中引用的如下代码，应放在&lt;/body&gt;&lt;/html&gt;之间，否则可能会出现引用无效的情况。&lt;script src=&quot;./js/build.js&quot;&gt;</code></pre></li></ul><h2 id="webpack-dev-server介绍"><a href="#webpack-dev-server介绍" class="headerlink" title="webpack-dev-server介绍"></a>webpack-dev-server介绍</h2><p>webpack-dev-server开发服务器，它的功能可以实现热加载 并且自动刷新浏览器。</p><h3 id="webpack的安装-1"><a href="#webpack的安装-1" class="headerlink" title="webpack的安装"></a>webpack的安装</h3><pre><code>npm install webpack@3.6.0 webpack-dev-server@2.9.1 html-webpack-plugin@2.30.1 --save-dev</code></pre><p>安装完成，会发现程序目录出现一个package.json文件，此文件中记录了程序的依赖。</p><pre><code>{&quot;scripts&quot;: {&quot;dev&quot;: &quot;webpack-dev-server --inline --hot --open --port 5008&quot;},&quot;devDependencies&quot;: {&quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,&quot;webpack&quot;: &quot;^3.6.0&quot;,&quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;}}</code></pre><p>参数说明：</p><pre><code>--inline：自动刷新--hot：热加载--port：指定端口--open：自动在默认浏览器打开--host：可以指定服务器的 ip，不指定则为127.0.0.1，如果对外发布则填写公网ip地址devDependencies：开发人员在开发过程中所需要的依赖。scripts：可执行的命令</code></pre><p>###配置webpack.config.js<br> webpack.config.js是webpack的配置文件。在此文件中可以配置应用的入口文件、输出配置、插件等，其中要实现热加载自动刷新功能需要配置html-webpack-plugin插件。</p><p> html-webpack-plugin的作用是根据html模板在内存生成html文件，它的工作原理是根据模板文件在内存中生成一个index.html文件</p><ul><li><p>配置模板文件：</p><pre><code> &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;vue.js常用指令的测试&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--实现在body区域显示一个传智播客名称--&gt; &lt;div id=&quot;app&quot;&gt; &lt;!--相当于MVVM的view视图--&gt; &lt;!--{{name}}--&gt; &lt;a v-bind:href=&quot;url&quot;&gt; &lt;span v-text=&quot;name&quot;&gt;&lt;/span&gt; &lt;/a&gt; &lt;input type=&quot;text&quot; v-model=&quot;num1&quot;/&gt; + &lt;input type=&quot;text&quot; v-model=&quot;num2&quot;/&gt;= &lt;!-- &lt;span v-text=&quot;Number.parseInt(num1)+Number.parseInt(num2)&quot;&gt;&lt;/span&gt;--&gt; &lt;span v-text=&quot;result&quot;&gt;&lt;/span&gt; &lt;!--{{Number.parseInt(num1)+Number.parseInt(num2)}}--&gt; &lt;button v-on:click=&quot;change&quot;&gt;计算&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;以上代码已去掉引入的script标签，即引入的build.js</code></pre></li></ul><ul><li><p>配置 html-webpack-plugin,在webpack.config.js中配置html-webpack-plugin插件：</p><pre><code>//引用html-webpack-plugin插件，作用是根据html模板在内存生成html文件，它的工作原理是根据模板文件在内存中生成一个index.html文件。var htmlwp = require(&apos;html-webpack-plugin&apos;);module.exports={entry:&apos;./src/main.js&apos;,  //指定打包的入口文件output:{    path : __dirname+&apos;/dist&apos;,  // 注意：__dirname表示webpack.config.js所在目录的绝对路径    filename:&apos;build.js&apos;           //输出文件},devtool: &apos;eval-source-map&apos;,plugins:[    new htmlwp({        title: &apos;首页&apos;,  //生成的页面标题&lt;head&gt;&lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;        filename: &apos;index.html&apos;, //webpack-dev-server在内存中生成的文件名称，自动将build注入到这个页面底部，才能实现自动刷新功能        template: &apos;vue_02.html&apos; //根据vue_02.html这个模板来生成(这个文件请程序员自己生成)    })]</code></pre><p>  }</p></li></ul><ul><li><p>启动</p><ul><li>使用webstorm，右键package.json文件，选择“Show npm Scripts”</li><li>双击dev,自动打开浏览器</li></ul></li><li><p>debug调试</p><ul><li><p>在webpack.config.js中配置，参照上述完整配置：  </p><pre><code>devtool: &apos;eval-source-map&apos;</code></pre></li><li><p>在add方法中添加debugger，例如：</p><pre><code>// 定义add函数function add(x, y) {debuggerreturn x + y }</code></pre></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack介绍&quot;&gt;&lt;a href=&quot;#webpack介绍&quot; class=&quot;headerlink&quot; title=&quot;webpack介绍&quot;&gt;&lt;/a&gt;webpack介绍&lt;/h2&gt;&lt;p&gt;webpack：是一个前端资源的打包工具，它可以将js、image、css等资源当成
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB安装及操作</title>
    <link href="http://yoursite.com/2019/02/18/mongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_20190218/"/>
    <id>http://yoursite.com/2019/02/18/mongoDB学习笔记_20190218/</id>
    <published>2019-02-18T13:00:00.000Z</published>
    <updated>2019-08-05T04:50:09.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongoDB简介"><a href="#mongoDB简介" class="headerlink" title="mongoDB简介"></a>mongoDB简介</h2><p>mongodb：MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><h2 id="mongoDB的安装"><a href="#mongoDB的安装" class="headerlink" title="mongoDB的安装"></a>mongoDB的安装</h2><ul><li><p>官方下载地址：<a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a><br>安装成功后，生成的默认目录为：<br><img src="https://ww1.yunjiexi.club/2019/02/18/D3fYa.png" alt="D3fYa.png"><br>mongoDB4.0的版本安装后，默认安装目录下是没有 mongo.conf文件的</p></li><li><p>注册 MongoDB服务：<br>默认情况下，MongoDB4.0服务在安装过程中是已经注册的，如果没有注册可以通过以下命令，完成注册：</p><pre><code>mongod –dbpath D:\Program Files\MongoDB\Server\4.0\data\db –logpath D:\Program Files\MongoDB\Server\4.0\log\mongo.log –logappend –serviceName MongoDB –auth –install </code></pre><p>3.0的版本是通过以下命令进行注册的：</p><pre><code>mongod.exe ‐‐config &quot;d:\MongoDB\Server\3.4\mongo.conf&quot; ‐‐install</code></pre></li><li><p>启动服务</p><pre><code>net start MongoDB</code></pre></li><li><p>关闭服务</p><pre><code>net stop MongoDB</code></pre></li></ul><h2 id="mongoDB的配置"><a href="#mongoDB的配置" class="headerlink" title="mongoDB的配置"></a>mongoDB的配置</h2><ul><li><p>mongoDB4.0的版本安装后，默认安装目录下是没有 mongo.conf文件的</p></li><li><p>安装成功后，可以通过IE浏览器查看是否启动：<br><img src="https://ww1.yunjiexi.club/2019/02/18/D3Yqt.png" alt="D3Yqt.png"></p></li><li><p>通过命令行方式查看是否启动：<br><img src="https://ww1.yunjiexi.club/2019/02/18/D3eJc.png" alt="D3eJc.png"></p></li></ul><h2 id="mongoDB的入门操作"><a href="#mongoDB的入门操作" class="headerlink" title="mongoDB的入门操作"></a>mongoDB的入门操作</h2><ul><li><p>连接mongoDB</p></li><li><p>数据库操作</p><ul><li>查询数据库<pre><code>show dbs</code></pre>运行结果：<pre><code>admin   0.000GBconfig  0.000GBlocal   0.000GB</code></pre></li><li>查看当前数据库<pre><code>db</code></pre>运行结果：<pre><code>test</code></pre></li><li><p>创建数据库</p><pre><code>use test</code></pre><p>如果当前数据库不存在则创建，如果存在则切换至该数据库。</p></li><li><p>删除数据库</p><pre><code>db.dropDatabase()</code></pre></li></ul></li><li><p>集合操作</p><ul><li>创建集合<pre><code>db.createCollection(name, options)db.createCollection(&apos;student&apos;)</code></pre>options属性参考：<br><img src="https://ww1.yunjiexi.club/2019/02/18/D3K0k.png" alt="D3K0k.png"></li><li>删除集合<pre><code>db.student.drop()</code></pre></li></ul></li><li><p>插入文档</p><pre><code>db.COLLECTION_NAME.insert(document)db.student.insert({“name”:&quot;yzhm&quot;})</code></pre><p>运行结果：</p><pre><code>{ &quot;_id&quot; : ObjectId(&quot;5c6a6c7112affd29ce87795c&quot;), &quot;name&quot; : &quot;yzhming&quot; }</code></pre></li><li>查询文档<pre><code>db.collection.find(query, projection)db.student.find()</code></pre>运行结果：<pre><code>{ &quot;_id&quot; : ObjectId(&quot;5c6a6c7112affd29ce87795c&quot;), &quot;name&quot; : &quot;yzhming&quot; }</code></pre></li><li>更新文档</li><li>删除文档</li><li>创建用户</li><li>查询用户</li><li>修改用户</li><li>修改密码</li><li>删除用户</li></ul><p>参考教程：[<a href="http://www.runoob.com/mongodb/mongodb-query.html]" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-query.html]</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mongoDB简介&quot;&gt;&lt;a href=&quot;#mongoDB简介&quot; class=&quot;headerlink&quot; title=&quot;mongoDB简介&quot;&gt;&lt;/a&gt;mongoDB简介&lt;/h2&gt;&lt;p&gt;mongodb：MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨
      
    
    </summary>
    
      <category term="NoSQL" scheme="http://yoursite.com/categories/NoSQL/"/>
    
    
      <category term="数据库，NoSQL，mongodb" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8CNoSQL%EF%BC%8Cmongodb/"/>
    
  </entry>
  
  <entry>
    <title>NumPy学习笔记</title>
    <link href="http://yoursite.com/2019/01/29/NumPy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_20190129/"/>
    <id>http://yoursite.com/2019/01/29/NumPy学习笔记_20190129/</id>
    <published>2019-01-29T13:00:00.000Z</published>
    <updated>2019-08-05T04:50:09.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NumPy简介"><a href="#NumPy简介" class="headerlink" title="NumPy简介"></a>NumPy简介</h2><p>NumPy：Numerical Python,是python进行科学计算的一个基础包。</p><h2 id="NumPy的数据结构"><a href="#NumPy的数据结构" class="headerlink" title="NumPy的数据结构"></a>NumPy的数据结构</h2><p>ndarry：N-dimensional array,一种由相同类型的元素组成的多维数组对象。</p><ol><li>元素的数据类型由dtpye(data-type)对象来指定，每个ndarry只有一种dtype类型。</li><li>大小固定，创建好数组时一旦指定好大小，不会再发生改变 </li></ol><h2 id="ndarry的创建"><a href="#ndarry的创建" class="headerlink" title="ndarry的创建"></a>ndarry的创建</h2><ul><li><p>array函数：将序列转换成ndarry</p><pre><code>//通过array函数创建data1 = [0,1,2,3,1.1]arr1 = np.array(data1)</code></pre><p>运行结果：</p><pre><code>array([0. , 1. , 2. , 3. , 1.1])</code></pre><p>嵌套序列创建：</p><pre><code>//通过嵌套序列创建data2 = [[1,2,3],[4,5,6]]arr2 = np.array(data2)</code></pre><p>运行结果：</p><pre><code>array([[1, 2, 3],[4, 5, 6]])</code></pre></li></ul><ul><li><p>zeros函数：创建指定长度的全零数组</p><pre><code>np.zeros(10)</code></pre><p>运行结果：</p><pre><code>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</code></pre><p>创建多维：</p><pre><code>np.zeros((3,4))</code></pre><p>运行结果：</p><pre><code>array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])</code></pre></li><li><p>ones函数：创建指定长度的全1数组</p><pre><code>np.ones(10)</code></pre><p>运行结果：</p><pre><code>array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</code></pre><p>创建多维：</p><pre><code>np.ones((2,3))</code></pre><p>运行结果：</p><pre><code>array([[1., 1., 1.],      [1., 1., 1.]])</code></pre></li><li>empty函数：创建一个没有具体值的数组，通常都是一些未初始化的垃圾值<pre><code>np.empty(5)</code></pre>运行结果：<pre><code>array([0. , 1. , 2. , 3. , 1.1])</code></pre>创建多维：<pre><code>np.empty((2,2,3))</code></pre>运行结果：<pre><code>array([[[0., 0., 0.],      [0., 0., 0.]],      [[0., 0., 0.],      [0., 0., 0.]]])</code></pre></li><li>arange函数：类似range函数，通过开始值、终值和步长创建数组。创建的数组不包含终值值。<pre><code>np.arange(10)</code></pre>运行结果：<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre>根据起始值，步长创建：<pre><code>np.arange(1,10,1)</code></pre>运行结果:<pre><code>array([1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre></li><li>linspace函数：通过指定开始值、终值和元素个数来创建一维数组，可以通过endpoint关键字指定是否包括终值，缺省设置是包括终值<pre><code>np.linspace(1,10,5)</code></pre>运行结果：<pre><code>array([ 1.  ,  3.25,  5.5 ,  7.75, 10.  ])</code></pre></li><li>logspace函数：和linspace类似，用来创建等比数列<pre><code>np.logspace(0,2,5)</code></pre>运行结果：<pre><code>array([ 10.        ,  17.7827941 ,  31.6227766 ,  56.23413252,         100.        ])</code></pre></li><li><p>random函数：随机创建数组</p><pre><code>np.random.random(10)</code></pre><p>运行结果：</p><pre><code>array([0.60751347, 0.29262802, 0.48379076, 0.06987773, 0.09515098,       0.1943465 , 0.46335728, 0.46320678, 0.81314993, 0.51329606])</code></pre><p>通过设置参数创建：</p><pre><code>np.random.random((2,2,3))</code></pre><p>运行结果：</p><pre><code>array([[[0.06608054, 0.55363782, 0.62406291],      [0.77318127, 0.58557065, 0.17148664]],      [[0.79126153, 0.83586225, 0.59518475],      [0.60087036, 0.13638575, 0.7900084 ]]])</code></pre></li></ul><h2 id="ndarry的属性"><a href="#ndarry的属性" class="headerlink" title="ndarry的属性"></a>ndarry的属性</h2><ul><li>ndim:维度数量<pre><code>arr1.ndim</code></pre>运行结果：<pre><code>1</code></pre></li><li>shape：表示各维度大小的元组<pre><code>arr2.shape</code></pre>运行结果：<pre><code>(2, 3)</code></pre></li><li>dtype：元素数据类型<pre><code>arr2.dtype</code></pre>运行结果：<pre><code>dtype(&apos;int32&apos;)</code></pre></li><li>size：元素总个数m*n<pre><code>arr2.size</code></pre>运行结果：<pre><code>6</code></pre></li></ul><h2 id="ndarry的数据类型"><a href="#ndarry的数据类型" class="headerlink" title="ndarry的数据类型"></a>ndarry的数据类型</h2><p>创建数组时，可以通过dtype显式指定数据类型，如不指定NumPy会根据数据默认指定。例：</p><pre><code>data3 = np.array([1,2,3,4,5])data3.dtype</code></pre><p>运行结果：</p><pre><code>dtype(&apos;int32&apos;)</code></pre><p>astype函数：数据类型转换</p><pre><code>data4 = data3.astype(float)data4.dtype</code></pre><p> 运行结果：</p><pre><code>dtype(&apos;float64&apos;)</code></pre><h2 id="数组与标量、数组直接的运算"><a href="#数组与标量、数组直接的运算" class="headerlink" title="数组与标量、数组直接的运算"></a>数组与标量、数组直接的运算</h2><ul><li>矢量化:不需要编写循环，可实现对数据的批量计算。性能上比Python快一两个数量级，大小相等的任何算术运算都会应用到元素级。</li></ul><ol><li><p>数组与标量之间的运算</p><pre><code>arr1 = np.array([1,2,3,4,5])arr1+2</code></pre><p>运行结果：</p><pre><code>array([3, 4, 5, 6, 7])</code></pre><p>除法运算：</p><pre><code>from __future__ import division1/arr1</code></pre><p>运行结果：</p><pre><code>array([1.        , 0.5       , 0.33333333, 0.25      , 0.2       ])</code></pre></li><li><p>大小相等数组之间的运算</p><pre><code>arr2 = ([5,6,7,8,9])arr1+arr2</code></pre><p>运行结果：</p><pre><code>array([ 6,  8, 10, 12, 14])</code></pre><p>例1</p><pre><code>arr3 = np.array([[1,2,3],[4,5,6]])arr4 = np.array([[1,2,3],[4,5,6]])arr3 + arr4</code></pre><p>运行结果：</p><pre><code>array([[ 2,  4,  6],       [ 8, 10, 12]])</code></pre><p>例2</p><pre><code>arr3 - arr4</code></pre><p>运行结果：</p><pre><code>array([[0, 0, 0],    [0, 0, 0]])</code></pre><p>例3</p><pre><code>arr3 * arr4</code></pre><p>运行结果：</p><pre><code>array([[ 1,  4,  9],       [16, 25, 36]])</code></pre><p>例4</p><pre><code>arr3 / arr4 </code></pre><p>运行结果：</p><pre><code>array([[1., 1., 1.],[1., 1., 1.]])</code></pre></li><li>数组的矩阵积</li></ol><ul><li><p>矩阵积：不是元素级的运算，两个二维（多维）矩阵，第一个矩阵的列数与第二个矩阵的行数相同，可以进行矩阵乘法，即矩阵积。</p><pre><code>设A为的m×p的矩阵，B为p×n的矩阵，那么称m×n的矩阵C为矩阵A与B的乘积，记作C=AB，其中矩阵C中的第i行第j列元素可以表示为：</code></pre><p><a href="https://www.hualigs.cn/image/DgJKD" target="_blank" rel="noopener"><img src="https://ww1.yunjiexi.club/2019/02/01/DgJKD.png" alt="DgJKD.png"></a></p><pre><code>arr1 = np.array([[1,2,3],[1,2,3]])arr2 = np.array([[1,2],[1,1],[2,1]])arr1.dot(arr2)</code></pre><p>运行结果：</p><pre><code>array([[9, 7],       [9, 7]])</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NumPy简介&quot;&gt;&lt;a href=&quot;#NumPy简介&quot; class=&quot;headerlink&quot; title=&quot;NumPy简介&quot;&gt;&lt;/a&gt;NumPy简介&lt;/h2&gt;&lt;p&gt;NumPy：Numerical Python,是python进行科学计算的一个基础包。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python，NumPy" scheme="http://yoursite.com/tags/Python%EF%BC%8CNumPy/"/>
    
  </entry>
  
  <entry>
    <title>Pandas学习笔记</title>
    <link href="http://yoursite.com/2019/01/15/Pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_20190115/"/>
    <id>http://yoursite.com/2019/01/15/Pandas学习笔记_20190115/</id>
    <published>2019-01-15T13:00:00.000Z</published>
    <updated>2019-08-05T04:50:09.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas数据结构"><a href="#Pandas数据结构" class="headerlink" title="Pandas数据结构"></a>Pandas数据结构</h1><p>pandas的主要数据结构：Series和DataFarme</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ol><li><p>一种类似一维数组的对象，由一组数据及相关的索引组成。</p><pre><code>#创建obj1 = Series([9,-1,7,6],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])obj1</code></pre><p>运行结果：</p><pre><code>a    9b   -1c    7d    6dtype: int64</code></pre></li><li><p>通过字典的方式创建：</p><pre><code>data = {&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3,&apos;d&apos;:4}obj2 = Series(data)obj2</code></pre><p>运行结果：</p><pre><code>a    1b    2c    3d    4dtype: int64</code></pre></li><li><p>通过列表形成创建：</p><pre><code>data = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]obj3 = Series(data)obj3</code></pre><p>运行结果：</p><pre><code>0    a1    b2    c3    ddtype: object</code></pre></li><li><p>通过列表作为索引创建匹配，以indx值为索引去匹配查找data中的值，索引中未找到值的以NaN表示。data中多余的值不显示。</p><pre><code>data = {&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3,&apos;d&apos;:4}indx = [&apos;a&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;]obj4 = Series(data,index=indx)obj4</code></pre><p>运行结果：</p><pre><code>a    1.0c    3.0d    4.0e    NaNdtype: float64</code></pre></li><li><p>Series在运算中会自动对齐不同的索引的数据：</p><pre><code>obj2+ojb4</code></pre><p>运算结果：</p><pre><code>a    2.0b    NaNc    6.0d    8.0e    NaNdtype: float64</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Pandas数据结构&quot;&gt;&lt;a href=&quot;#Pandas数据结构&quot; class=&quot;headerlink&quot; title=&quot;Pandas数据结构&quot;&gt;&lt;/a&gt;Pandas数据结构&lt;/h1&gt;&lt;p&gt;pandas的主要数据结构：Series和DataFarme&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python，Pandas" scheme="http://yoursite.com/tags/Python%EF%BC%8CPandas/"/>
    
  </entry>
  
  <entry>
    <title>关于学习</title>
    <link href="http://yoursite.com/2019/01/10/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A020190110/"/>
    <id>http://yoursite.com/2019/01/10/关于学习20190110/</id>
    <published>2019-01-10T13:00:00.000Z</published>
    <updated>2019-08-05T04:50:09.169Z</updated>
    
    <content type="html"><![CDATA[<p>今天读了一篇关于讨论学习的文章，感觉受益匪浅。文章从以下几个方面阐述了如何理解学习：</p><h3 id="知识的错觉"><a href="#知识的错觉" class="headerlink" title="知识的错觉"></a>知识的错觉</h3><ul><li><p>我知道了≠我懂了：</p><p>看自己是不是真懂一件事，通常追问3个有深度的问题，就能辨别自己是否真正懂了。</p><p>把类似的为什么放在学过的领域，再试着多追问两三个问题，就能发现不少错觉了。</p></li></ul><h3 id="知识的分类"><a href="#知识的分类" class="headerlink" title="知识的分类"></a>知识的分类</h3><p>  比起直接学习，先明确学的是什么，对知识进行分类效果要更好。按知识的分类，分为以下几类：</p><pre><code>事实知识        | 2018年中国的GDP是多少概念知识        | GDP指标的含义、概念程序知识        | GDP如何计算元认知知识      | GDP属于宏观经济学的重要组成部分。理解研究GDP的意义：为了更好地衡量、评估、分析一个经济的生成力。</code></pre><p>   仅仅学习事实性、概念性的知识意义并不大，可以完全在网上搜索解决，而且被直接应用的范围比较小。大部分人陷入了这两者的泛泛学习。</p><p>   程序认识、元认识认识对于我们价值更大，需要多花功夫钻研。</p><h3 id="理解学习"><a href="#理解学习" class="headerlink" title="理解学习"></a>理解学习</h3><ul><li><p>加强实践和输出，学完后马上用、马上教别人</p><p>主动学习（输出）&gt; 被动学习（输入）<br>  <img src="http://pkffmwo8x.bkt.clouddn.com/%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0_2019011001.jpg"></p></li></ul><ul><li><p>系统地学习</p><ul><li>通过碎片化学习的知识，拼接成更完整的网，形成自己的知识体系，达到真的懂，真能用，才可能因为学多了拥有迁移思考的能力，解决更多的问题。</li></ul></li><li><p>建立自己的多元学科模型</p><ul><li><p>人的格局不同，差距很大；人和人的差别，在于认知。只有元知识不断升级，才能让自己的整个知识体系更完善、更广博。</p></li><li><p>查理·芒格的“多学科思维模型”指出：我坚信几乎所有聪明人都有一套思维模型的框架。有了那个体系之后，你就能逐渐提高对事物的认识。</p><p>  芒格比较推崇的思维模型–</p><p>  复利原则 / 排列组合原理 / 费马帕斯卡系统 / 决策树理论 /会记学<br>  / 复式簿记 / 质量控制理论 / 后备系统 / 断裂点理论 / 理解质量概念 / 误判心理学 / 微观经济学 / 规模优势理论</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天读了一篇关于讨论学习的文章，感觉受益匪浅。文章从以下几个方面阐述了如何理解学习：&lt;/p&gt;
&lt;h3 id=&quot;知识的错觉&quot;&gt;&lt;a href=&quot;#知识的错觉&quot; class=&quot;headerlink&quot; title=&quot;知识的错觉&quot;&gt;&lt;/a&gt;知识的错觉&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p
      
    
    </summary>
    
      <category term="生活随笔" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>再见，2018</title>
    <link href="http://yoursite.com/2018/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2018/"/>
    <id>http://yoursite.com/2018/12/31/再见，2018/</id>
    <published>2018-12-31T13:00:00.000Z</published>
    <updated>2019-08-05T04:50:09.169Z</updated>
    
    <content type="html"><![CDATA[<p>2018年的最后一天，独自坐在灯下迎接2019年的到来。时间过的有多么快，快的让人都来不及遐想，这一年就这么匆匆结束了。</p><p>2017年此时的种种经历仍挥之不去，如今已马上要跨入了2019年了。就好像做了个梦似的，一觉醒来已经经历了太多的时间轮回。</p><p>再见，2018，回想这一年收获了多少，总感觉还有太多太多的事没来得及做，就这样匆匆结束了。唯一收获的是，这一年有了些许白发，不得不承认岁月催人老。随着时光的流逝，我们已渐渐老去，经历的那些年，那些事，也逐渐尘封在人生的岁月里。</p><p>你好，2019，经过这些天的折腾，唯一欣慰的是属于自己的网站终于在2019年开通了。2018年已这样的方式结束，2019年已这样的方式开始，希望在未来的日子里每一天都能收获满满。今天看了一篇文章，就以此为志，迎接2019年人生新的阶段。</p><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DR5ct.jpg"></center></p><center><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DR300.jpg"></center></p><center><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DRqYp.jpg"></center></p><center><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DRgqg.jpg"></center></p><center><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DRn4e.jpg"></center></p><center><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DRPoc.jpg"></center></p><center><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DRWZa.jpg"></center></p><center><p><center><br><img src="https://ww1.yunjiexi.club/2019/03/03/DR1jk.jpg"></center></p><center></center></center></center></center></center></center></center></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年的最后一天，独自坐在灯下迎接2019年的到来。时间过的有多么快，快的让人都来不及遐想，这一年就这么匆匆结束了。&lt;/p&gt;
&lt;p&gt;2017年此时的种种经历仍挥之不去，如今已马上要跨入了2019年了。就好像做了个梦似的，一觉醒来已经经历了太多的时间轮回。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="生活随笔" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
